Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
mapcodes$ISO_code
countries <- as.vector(mapcodes['ISO_code'])
# leaflet() %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons()
# mapStates = map("world", fill = TRUE, plot = FALSE)
# leaflet(data = mapStates) %>%
#   addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
mapcodes$ISO_code
countries <- as.vector(mapcodes['ISO_code'])
mapStates = map("world", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
install.packages("geojsonio")
library(geojsonio)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
library(shiny)
library(leaflet)
library(maps)
library(geojsonio)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
# countries <- as.vector(mapcodes['ISO_code'])
# leaflet() %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons()
mapStates = map("world", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
View(mapStates)
library(shiny)
library(leaflet)
library(maps)
library(geojsonio)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
# countries <- as.vector(mapcodes['ISO_code'])
# leaflet() %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons()
mapWorld = map("world", fill = FALSE, plot = FALSE)
leaflet(data = mapStates) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
library(shiny)
library(leaflet)
library(maps)
library(geojsonio)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
# countries <- as.vector(mapcodes['ISO_code'])
# leaflet() %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons()
mapWorld = map("world", fill = FALSE, plot = FALSE)
leaflet(data = mapWorld) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
library(shiny)
library(leaflet)
library(maps)
library(geojsonio)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
# countries <- as.vector(mapcodes['ISO_code'])
# leaflet() %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons()
mapWorld = map("world", fill = TRUE, plot = FALSE)
leaflet(data = mapWorld) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
leaflet(data = mapWorld) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
typeof(mapWorld)
View(mapWorld)
mapWorld[["names"]]
map('world')
leaflet() %>%
addTiles() %>%
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
leaflet() %>%
addTiles() %>%
a
source('~/Academic Files/2019-2020/2019 Fall/INFO 430/info430-final/source.r', echo=TRUE)
leaflet() %>%
addTiles()
leaflet(worldMapEnv)
leaflet() %>%
addTiles()
leaflet(data = mapWorld) %>%
addTiles()
iso.expand(mapcodes)
iso.alpha(mapcodes, n=3)
iso.alpha(mapcodes)
c <- mapcodes
typeof(c)
c <- unlink(mapcodes, use.name=FALSE)
c <- unlink(mapcodes)
iso.alpha(c)
c <- unlist(mapcodes, use.names = FALSE)
iso.alpha(c)
iso.alpha(c, n=3)
mapcodes
iso.expand(c)
c-expand <- iso.expand(c)
c_expand <- iso.expand(c)
View(c_expand)
typeof(c_expand)
c
leaflet(data = mapWorld) %>%
addTiles()
mapAndHF <- dbGetQuery(con, paste("
SELECT ISO_code, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID"))
View(mapAndHF)
mapAndHF <- dbGetQuery(con, paste("
SELECT ISO_code, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
View(mapAndHF)
typeof(mapAndHF)
mapAndHF$ISO_code
iso.expand(mapAndHF)
iso.expand(mapAndHF$ISO_code)
library(shiny)
library(leaflet)
library(maps)
library(geojsonio)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT ISO_code
FROM Countries", sep=""))
mapAndHF <- dbGetQuery(con, paste("
SELECT ISO_code, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
iso.expand(mapAndHF$ISO_code)
mapWorld = map("world", fill = TRUE, plot = FALSE)
# create dataframe with ISO Codes and HF Scores
# leaflet(data = mapWorld) %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
leaflet(data = mapWorld) %>%
addTiles()
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
View(mapAndHF)
iso.expand(mapAndHF$ISO_code)
View(mapcodes)
mapcodes <- dbGetQuery(con, paste("
SELECT *
FROM Countries", sep=""))
View(mapcodes)
expand <- iso.expand(mapAndHF$ISO_code)
expand
expand$161
expand[161]
typeof(expand[161])
typeof(expand)
list(expand)
test <- list(expand)
View(test)
expand <- iso.expand(mapAndHF$ISO_code)
mapWorld = map("world", fill = TRUE, plot = FALSE)
View(mapAndHF)
typeOf(mapAndHF)
typeof(mapAndHF)
hf_df <- data.frame(mapAndHF$ISO_code, expand, mapAndHF$hf_score)
View(hf_df)
View(hf_df)
hf_df$expand
# mannually fixing coutnries
hf_df[1, 2] = China
# mannually fixing coutnries
hf_df[1, 2] = 'China'
hf_df <- data.frame(mapAndHF$ISO_code, expand, mapAndHF$hf_score)
# mannually fixing coutnries
hf_df[1, 2] <- 'China'
hf_df <- data.frame(mapAndHF$ISO_code, expand, mapAndHF$hf_score)
hf_df[1, 2]
typeof(hf_df[1,2])
hf_df <- data.frame(mapAndHF$ISO_code, expand, mapAndHF$hf_score, stringsAsFactors = FALSE)
# mannually fixing coutnries
hf_df[1, 2] <- "China"
View(hf_df)
hf_df[1, 2] <- "China"
hf_df[150, 2] <- "Spain"
hf_df[152, 2] <- "France"
hf_df[153, 2] <- "UK"
hf_df[160, 2] <- "Norway"
hf_df[161, 2] <- "Portugal"
View(hf_df)
View(mapAndHF)
library(shiny)
library(leaflet)
library(maps)
library(geojsonio)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
#testing basic map off our ISO codes
mapcodes <- dbGetQuery(con, paste("
SELECT *
FROM Countries", sep=""))
mapAndHF <- dbGetQuery(con, paste("
SELECT ISO_code, c.Country_ID hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
expand <- iso.expand(mapAndHF$ISO_code)
hf_df <- data.frame(mapAndHF$ISO_code, mapAndHF$Country_ID, mapAndHF$hf_score, stringsAsFactors = FALSE)
# mannually fixing coutnries
# hf_df[1, 2] <- "China"
# hf_df[150, 2] <- "Spain"
# hf_df[152, 2] <- "France"
# hf_df[153, 2] <- "UK"
# hf_df[142, 2] <- "UK"
# hf_df[160, 2] <- "Norway"
# hf_df[161, 2] <- "Portugal"
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
# create dataframe with ISO Codes and HF Scores
# leaflet(data = mapWorld) %>%
#   addProviderTiles("CartoDB.Positron") %>%
#   addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1)
leaflet(data = mapWorld) %>%
addTiles()
server <- function(input, output) {
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
}
View(mapAndHF)
View(hf_df)
hf_df <- data.frame(mapAndHF$ISO_code, mapAndHF$Country_ID, mapAndHF$hf_score, stringsAsFactors = FALSE)
hf_df <- data.frame(mapAndHF$ISO_code,mapAndHF$hf_score, stringsAsFactors = FALSE)
mapAndHF <- dbGetQuery(con, paste("
SELECT ISO_code, c.Country_ID, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
mapAndHF <- dbGetQuery(con, paste("
SELECT ISO_code, c.CountryName, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
hf_df <- data.frame(mapAndHF$ISO_code,mapAndHF$CountryName, mapAndHF$hf_score, stringsAsFactors = FALSE)
View(hf_df)
hf_df <- data.frame(mapAndHF$ISO_code=ISO,mapAndHF$CountryName, mapAndHF$hf_score, stringsAsFactors = FALSE)
hf_df <- data.frame(ISO=mapAndHF$ISO_code,mapAndHF$CountryName, mapAndHF$hf_score, stringsAsFactors = FALSE)
View(hf_df)
hf_df <- data.frame(ISO=mapAndHF$ISO_code,Country=mapAndHF$CountryName, HF_Score=mapAndHF$hf_score, stringsAsFactors = FALSE)
View(hf_df)
maps::worldMapEnv
world.cities
WorldPhones
worldMapEnv
map(world)
typeof(world)
View(world)
?`geojoin
g
q
map(world)
q()
