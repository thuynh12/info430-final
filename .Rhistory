year_selection <- hf_df %>%
filter(Year == input$select_year)
})
# output$datatable <- renderDataTable({
#   hf_df_react()
# })
output$dynamicHF <-renderPlotly({
updated_hf_df <- hf_df_react()
u_df_df <- plot_geo(updated_hf_df) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = paste("Human Freedom Score in", input$select_year),
geo = m_options
)
})
ByIdAndYear <- reactive({
subset_all <- all %>%
select(ISO_Code, CountryName, Year, input$select_id) %>%
filter(Year == input$select_mapyear)
# this_id <- input$select_id
})
output$dynamicMapScore <- renderPlotly({
sub <- ByIdAndYear()
plot_geo() %>%
add_trace(
z = ~sub[[4]],
color = ~sub[[4]],
colors = 'Reds',
text = ~sub$CountryName,
locations = ~sub$ISO_Code,
marker = list(line = colorList)
) %>%
colorbar(title = input$select_id) %>%
layout(
title = paste("Map of", input$select_id, "in year", input$select_mapyear),
geo = m_options
)
})
}
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# retrieve server variable and plot information
source("source.r")
# Define UI for app that draws a histogram ----
ui <- navbarPage(theme = shinytheme("journal"), "INFO 430",
tabPanel("Summary",
titlePanel("--"),
h1("Problem Statement"),
p("It is uncommon for news outlets in the United States to discuss events occurring
in different parts of the world. After conducting a global survey, the Pew Research
Center discovered that the global median said \"they follow news about their country
(86%) or city and town (78%) closely,compared with fewer than six-in-ten who say the
same when it comes to news about other countries generally (57%)\".This presents a
problem because it forms a demographic that becomes ignorant to world events that
have the potential to impact their country. Without the ability to make informed
decisions, citizens are unable to acquire the knowledge necessary to determine who
to vote for in elections and do not understand what is occuring in the rest of the world."),
h1("Where is this data coming from?"),
p("For our data, we will use the Human Freedom Index dataset from the Cato Institution.
This dataset looks at every country from 2008 to 2016 and gives each country a human
freedom score ranging from zero to ten. The dataset also gives scores that encompasses
personal, civil, and economic freedoms. Our solution values the understanding of these
rights within countries and is vital when looking at different events occurring throughout
the world to help understand global affairs.")
),
# create tab for scatter plot with personal/economic freedom
tabPanel("Scatter",
titlePanel("Personal and Economic Freedom"),
p("This scatter plot explores the relationship between personal freedom scores, economic
freedom scores and human freedom scores. The plot contains scores from all countries
for years 2008 - 2016. The scatter plot shows that both personal and economic scores
have a positive coorelation with human freedom scores. This means that the human freedom
score increases when economic and personal freedom scores increase."),
plotlyOutput("scatterPlot1")
),
# create placeholder tab
tabPanel("Bar Chart",
titlePanel("Interactive Bar Chart by Country and Year"),
headerPanel("Title"),
sidebarPanel(
p("Adjust the filters in order to see freedom scores for a specific Country in a specific year."),
selectInput('select_country', 'Select a Country:', choices = unique(allCodes$CountryName), selected = 'United States'),
selectInput('selected_year', 'Select a Year:', choices = unique(allCodes$Year), selected = 2008),
h4("Key:"),
p(strong("ef_legal_military:"), "Legal Military Freedom Score"),
p(strong("ef_score:"), "Economic Freedom Score"),
p(strong("hf_score:"), "Human Freedom Score"),
p(strong("pf_expression:"),"Personal Freedom of Expression Score"),
p(strong("pf_religion:"), "Personal Freedom of Religion Score"),
p(strong("pf_score:"), "Personal Freedom Score")
),
mainPanel(
plotlyOutput('trendPlot')
)
),
# create tab for HF Map
navbarMenu("Maps",
tabPanel("Human Freedom Scores",
titlePanel("World Mapping of Freedom Scores 2008-2016"),
# headerPanel("World Mapping of Freedom Scores 2008-2016"),
sidebarPanel(
p("Select a year to see the world mapping of the freedom scores for that year."),
selectInput('select_year',
label = "Select Year",
choices = sort(unique(hf_df$Year), decreasing = FALSE),
selected = 2008
)
),
mainPanel(
plotlyOutput("dynamicHF")
)
# h3("Static"),
# plotlyOutput("staticHF"),
# h3("Human Freedom Scores By Year"),
# dataTableOutput("datatable")
# plotlyOutput("dynamicHF")
# p("This is a summary of the project")
),
tabPanel("Map By Score",
titlePanel("Map by Score"),
headerPanel("Title"),
sidebarPanel(
selectInput('select_id', 'Select a Type of Score:', choices = unique(allIDS), selected = "hf_score"),
selectInput('select_mapyear', 'Select a Year:', choices = unique(all$Year), selected = 2010)
),
mainPanel(
plotlyOutput("dynamicMapScore")
))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# retrieve server variable and plot information
source("source.r")
# Define UI for app that draws a histogram ----
ui <- navbarPage(theme = shinytheme("journal"), "INFO 430",
tabPanel("Summary",
titlePanel("--"),
h1("Problem Statement"),
p("It is uncommon for news outlets in the United States to discuss events occurring
in different parts of the world. After conducting a global survey, the Pew Research
Center discovered that the global median said \"they follow news about their country
(86%) or city and town (78%) closely,compared with fewer than six-in-ten who say the
same when it comes to news about other countries generally (57%)\".This presents a
problem because it forms a demographic that becomes ignorant to world events that
have the potential to impact their country. Without the ability to make informed
decisions, citizens are unable to acquire the knowledge necessary to determine who
to vote for in elections and do not understand what is occuring in the rest of the world."),
h1("Where is this data coming from?"),
p("For our data, we will use the Human Freedom Index dataset from the Cato Institution.
This dataset looks at every country from 2008 to 2016 and gives each country a human
freedom score ranging from zero to ten. The dataset also gives scores that encompasses
personal, civil, and economic freedoms. Our solution values the understanding of these
rights within countries and is vital when looking at different events occurring throughout
the world to help understand global affairs.")
),
# create tab for scatter plot with personal/economic freedom
tabPanel("Scatter",
titlePanel("Personal and Economic Freedom"),
p("This scatter plot explores the relationship between personal freedom scores, economic
freedom scores and human freedom scores. The plot contains scores from all countries
for years 2008 - 2016. The scatter plot shows that both personal and economic scores
have a positive coorelation with human freedom scores. This means that the human freedom
score increases when economic and personal freedom scores increase."),
plotlyOutput("scatterPlot1")
),
# create placeholder tab
tabPanel("Bar Chart",
titlePanel("Interactive Bar Chart by Country and Year"),
headerPanel("Title"),
sidebarPanel(
p("Adjust the filters in order to see freedom scores for a specific Country in a specific year."),
selectInput('select_country', 'Select a Country:', choices = unique(allCodes$CountryName), selected = 'United States'),
selectInput('selected_year', 'Select a Year:', choices = unique(allCodes$Year), selected = 2008),
h4("Key:"),
p(strong("ef_legal_military:"), "Legal Military Freedom Score"),
p(strong("ef_score:"), "Economic Freedom Score"),
p(strong("hf_score:"), "Human Freedom Score"),
p(strong("pf_expression:"),"Personal Freedom of Expression Score"),
p(strong("pf_religion:"), "Personal Freedom of Religion Score"),
p(strong("pf_score:"), "Personal Freedom Score")
),
mainPanel(
plotlyOutput('trendPlot')
)
),
# create tab for HF Map
navbarMenu("Maps",
tabPanel("Human Freedom Scores",
titlePanel("World Mapping of Freedom Scores 2008-2016"),
# headerPanel("World Mapping of Freedom Scores 2008-2016"),
sidebarPanel(
p("Select a year to see the world mapping of the freedom scores for that year."),
selectInput('select_year',
label = "Select Year",
choices = sort(unique(hf_df$Year), decreasing = FALSE),
selected = 2008
)
),
mainPanel(
plotlyOutput("dynamicHF")
)
# h3("Static"),
# plotlyOutput("staticHF"),
# h3("Human Freedom Scores By Year"),
# dataTableOutput("datatable")
# plotlyOutput("dynamicHF")
# p("This is a summary of the project")
),
tabPanel("Map By Score",
titlePanel("Map by Score"),
headerPanel("Title"),
sidebarPanel(
selectInput('select_id', 'Select a Type of Score:', choices = unique(allIDS), selected = "hf_score"),
selectInput('select_mapyear', 'Select a Year:', choices = unique(all$Year), selected = 2010)
),
mainPanel(
plotlyOutput("dynamicMapScore")
))
)
)
shinyApp(ui = ui, server = server)
setwd("~/Academic Files/2019-2020/2019 Fall/INFO 430/info430-final")
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
# UNCOMMENT FOR MAC
# con <- DBI::dbConnect(odbc::odbc(), Driver = "ODBC Driver 13 for SQL Server", Server = "is-info430.ischool.uw.edu",
#                       Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
#                       Port = 1433)
# UNCOMMENT FOR WINDOWS
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
hf_df <- dbGetQuery(con, paste("SELECT ISO_code, c.CountryName, hf_score, Year=Year(EntryYear)
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID"))
hf_df_2009 <- dbGetQuery(con, paste("
SELECT ISO_code, c.CountryName, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
allCodes <- dbGetQuery(con, paste("
SELECT e.hf_score, e.ef_score, e.pf_score, hfi.ef_legal_military,
hfi.pf_expression, hfi.pf_religion, CountryName, Year=Year(EntryYear)
FROM [human-freedom-index] As hfi
JOIN Entries As e
ON hfi.hf_score = e.hf_score
JOIN Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
all <- dbGetQuery(con, paste("
SELECT ISO_Code, O.CountryName, Year=Year(E.EntryYear), hf_rank, hf_quartile, hf_score,
ef_score, ef_legal_military, pf_expression, pf_religion
FROM Entries as E
JOIN Countries as O
ON E.Country_ID = O.Country_ID",
sep=""))
# allCols <- colnames(all)
# allIDS <- allCols[6:10]
# Settings for color
colorList <- list(color = toRGB("grey"), width = 0.5)
m_options <- list(showframe = FALSE, showcoastlines = FALSE,
projection = list(type = 'Mercator'))
# plot_geo(hf_df_2009) %>%
#   add_trace(
#     z = ~hf_score,
#     color = ~hf_score,
#     colors = 'Blues',
#     text = ~CountryName,
#     locations = ~ISO_code,
#     marker = list(line = colorList)
#   ) %>%
#   colorbar(title = "Human Freedom Score") %>%
#   layout(
#     title = "Human Freedom Score in 2009",
#     geo = m_options
#   )
server <- function(input, output) {
#add reactive data information. Dataset = built in diamonds data
dataset <- reactive({
yearCountrySub <- allCodes %>%
filter(Year == input$selected_year & CountryName == input$select_country)
})
output$trendPlot <- renderPlotly({
df <- dataset()
p <- plot_ly(df,
x = c('hf_score', 'ef_score', 'pf_score', 'ef_legal_military', 'pf_expression', 'pf_religion'),
y = c(~hf_score, ~ef_score, ~pf_score, ~ef_legal_military, ~pf_expression, ~pf_religion),
type = 'bar'
) %>%
layout(
title = paste('Freedom Scores in', input$select_country,'in', input$selected_year),
xaxis = list(
type = 'category',
title = 'Type of Freedom Score'
),
yaxis = list(
title = 'Score (Ranging from 0-10)',
range = c(0, 10)
)
)
})
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
output$staticHF <- renderPlotly({
plot_geo(hf_df_2009) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = "Human Freedom Score in 2009",
geo = m_options
)
})
hf_df_react <- reactive({
year_selection <- hf_df %>%
filter(Year == input$select_year)
})
# output$datatable <- renderDataTable({
#   hf_df_react()
# })
output$dynamicHF <-renderPlotly({
updated_hf_df <- hf_df_react()
u_df_df <- plot_geo(updated_hf_df) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = paste("Human Freedom Score in", input$select_year),
geo = m_options
)
})
ByIdAndYear <- reactive({
subset_all <- all %>%
select(ISO_Code, CountryName, Year, input$select_id) %>%
filter(Year == input$select_mapyear)
# this_id <- input$select_id
})
output$dynamicMapScore <- renderPlotly({
sub <- ByIdAndYear()
plot_geo() %>%
add_trace(
z = ~sub[[4]],
color = ~sub[[4]],
colors = 'Reds',
text = ~sub$CountryName,
locations = ~sub$ISO_Code,
marker = list(line = colorList)
) %>%
colorbar(title = input$select_id) %>%
layout(
title = paste("Map of", input$select_id, "in year", input$select_mapyear),
geo = m_options
)
})
}
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# retrieve server variable and plot information
source("source.r")
# Define UI for app that draws a histogram ----
ui <- navbarPage(theme = shinytheme("journal"), "INFO 430",
tabPanel("Summary",
titlePanel("--"),
h1("Problem Statement"),
p("It is uncommon for news outlets in the United States to discuss events occurring
in different parts of the world. After conducting a global survey, the Pew Research
Center discovered that the global median said \"they follow news about their country
(86%) or city and town (78%) closely,compared with fewer than six-in-ten who say the
same when it comes to news about other countries generally (57%)\".This presents a
problem because it forms a demographic that becomes ignorant to world events that
have the potential to impact their country. Without the ability to make informed
decisions, citizens are unable to acquire the knowledge necessary to determine who
to vote for in elections and do not understand what is occuring in the rest of the world."),
h1("Where is this data coming from?"),
p("For our data, we will use the Human Freedom Index dataset from the Cato Institution.
This dataset looks at every country from 2008 to 2016 and gives each country a human
freedom score ranging from zero to ten. The dataset also gives scores that encompasses
personal, civil, and economic freedoms. Our solution values the understanding of these
rights within countries and is vital when looking at different events occurring throughout
the world to help understand global affairs.")
),
# create tab for scatter plot with personal/economic freedom
tabPanel("Scatter",
titlePanel("Personal and Economic Freedom"),
p("This scatter plot explores the relationship between personal freedom scores, economic
freedom scores and human freedom scores. The plot contains scores from all countries
for years 2008 - 2016. The scatter plot shows that both personal and economic scores
have a positive coorelation with human freedom scores. This means that the human freedom
score increases when economic and personal freedom scores increase."),
plotlyOutput("scatterPlot1")
),
# create placeholder tab
tabPanel("Bar Chart",
titlePanel("Interactive Bar Chart by Country and Year"),
headerPanel("Title"),
sidebarPanel(
p("Adjust the filters in order to see freedom scores for a specific Country in a specific year."),
selectInput('select_country', 'Select a Country:', choices = unique(allCodes$CountryName), selected = 'United States'),
selectInput('selected_year', 'Select a Year:', choices = unique(allCodes$Year), selected = 2008),
h4("Key:"),
p(strong("ef_legal_military:"), "Legal Military Freedom Score"),
p(strong("ef_score:"), "Economic Freedom Score"),
p(strong("hf_score:"), "Human Freedom Score"),
p(strong("pf_expression:"),"Personal Freedom of Expression Score"),
p(strong("pf_religion:"), "Personal Freedom of Religion Score"),
p(strong("pf_score:"), "Personal Freedom Score")
),
mainPanel(
plotlyOutput('trendPlot')
)
),
# create tab for HF Map
navbarMenu("Maps",
tabPanel("Human Freedom Scores",
titlePanel("World Mapping of Freedom Scores 2008-2016"),
# headerPanel("World Mapping of Freedom Scores 2008-2016"),
sidebarPanel(
p("Select a year to see the world mapping of the freedom scores for that year."),
selectInput('select_year',
label = "Select Year",
choices = sort(unique(hf_df$Year), decreasing = FALSE),
selected = 2008
)
),
mainPanel(
plotlyOutput("dynamicHF")
)
# h3("Static"),
# plotlyOutput("staticHF"),
# h3("Human Freedom Scores By Year"),
# dataTableOutput("datatable")
# plotlyOutput("dynamicHF")
# p("This is a summary of the project")
),
tabPanel("Map By Score",
titlePanel("Map by Score"),
headerPanel("Title"),
sidebarPanel(
selectInput('select_id', 'Select a Type of Score:', choices = unique(allIDS), selected = "hf_score"),
selectInput('select_mapyear', 'Select a Year:', choices = unique(all$Year), selected = 2010)
),
mainPanel(
plotlyOutput("dynamicMapScore")
))
)
)
shinyApp(ui = ui, server = server)
