#          )
shinyApp(ui = ui, server = server)
library(shiny)
# library(leaflet)
# library(maps)
# library(tigris)
# library(sp)
# library(maptools)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
hf_df <- dbGetQuery(con, paste("SELECT ISO_code, c.CountryName, hf_score, Year=Year(EntryYear)
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID"))
hf_df_2009 <- dbGetQuery(con, paste("
SELECT ISO_code, c.CountryName, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
allCodes <- dbGetQuery(con, paste("
SELECT e.hf_score, e.ef_score, e.pf_score, hfi.ef_legal_military,
hfi.pf_expression, hfi.pf_religion, CountryName, Year=Year(EntryYear)
FROM [human-freedom-index] As hfi
JOIN Entries As e
ON hfi.hf_score = e.hf_score
JOIN Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
colorList <- list(color = toRGB("grey"), width = 0.5)
m_options <- list(showframe = FALSE, showcoastlines = FALSE,
projection = list(type = 'Mercator'))
# plot_geo(hf_df_2009) %>%
#   add_trace(
#     z = ~hf_score,
#     color = ~hf_score,
#     colors = 'Blues',
#     text = ~CountryName,
#     locations = ~ISO_code,
#     marker = list(line = colorList)
#   ) %>%
#   colorbar(title = "Human Freedom Score") %>%
#   layout(
#     title = "Human Freedom Score in 2009",
#     geo = m_options
#   )
server <- function(input, output) {
#add reactive data information. Dataset = built in diamonds data
dataset <- reactive({
allCodes %>%
filter(Year == input$select_year & CountryName == input$select_country)
})
output$trendPlot <- renderPlotly({
df <- dataset()
p <- plot_ly(
x = c('hf_scores', 'ef_score', 'pf_score', 'ef_legal_military', 'pf_expression', 'pf_religion'),
# y = c(df$hf_score, df$ef_score, df$pf_score, df$ef_legal_military, df$pf_expression, df$pf_religion),
y = c(0, 10),
type = 'bar'
) %>%
layout(
title = 'help',
xaxis = list(
type = 'category',
title = 'scores'
),
yaxis = list(
title = 'score',
range = c(0, 10)
)
)
# chart <- plot_ly(
#   x = 'hf_score',
#   y = dt$hf_score,
#   type = 'bar'
# ) %>%
#   layout(
#     title = 'Temp',
#     xaxis = list(
#       type = 'category',
#       title = 'Scores'
#     ),
#     yaxis = list(
#       title = 'Score',
#       range = c(0,10)
#     )
#   )
})
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
output$staticHF <- renderLeaflet({
plot_geo(hf_df_2009) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = "Human Freedom Score in 2009",
geo = m_options
)
})
hf_df_react <- reactive({
year_selection <- hf_df %>%
filter(Year == input$select_year)
})
# output$datatable <- renderDataTable({
#   hf_df_react()
# })
output$dynamicHF <-renderPlotly({
updated_hf_df <- hf_df_react()
u_df_df <- plot_geo(updated_hf_df) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = "Human Freedom Score in 2009",
geo = m_options
)
})
}
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# retrieve server variable and plot information
source("source.r")
# Define UI for app that draws a histogram ----
ui <- navbarPage(theme = shinytheme("journal"), "INFO 430",
# create tab for scatter plot with personal/economic freedoms
tabPanel("Scatter",
titlePanel("Personal and Economic Freedom"),
p("This scatter plot explores the relationship between personal freedom scores, economic
freedom scores and human freedom scores. The plot contains scores from all countries
for years 2008 - 2016. The scatter plot shows that both personal and economic scores
have a positive coorelation with human freedom scores. This means that the human freedom
score increases when economic and personal freedom scores increase."),
plotlyOutput("scatterPlot1")
),
# create placeholder tab
# create tab for HF Map
tabPanel("Human Freedom Scores",
titlePanel("Human Freedom Score"),
h3("Static"),
plotlyOutput("staticHF"),
h3("Human Freedom Scores By Year"),
selectInput('select_year',
label = "Select Year",
choices = unique(hf_df$Year),
selected = 2008
),
# dataTableOutput("datatable")
plotlyOutput("dynamicHF")
# p("This is a summary of the project")
),
tabPanel("Interactive",
titlePanel("Summary"),
headerPanel("Title"),
sidebarPanel(
selectInput('select_country', 'select_country', choices = unique(allCodes$CountryName), selected = "Iran"),
selectInput('select_year', 'select_year', choices = unique(allCodes$Year), selected = 2008)
),
mainPanel(
plotlyOutput('trendPlot')
)
)
)
# tabPanel("Interactive Bar Chart",
#          titlePanel("Summary"),
#          headerPanel("Title for side panel"),
#          sidebarPanel(
#            selectInput('select_country', choices = allCodes$CountryName, selected = "A"),
#            selectInput('select_year', choices = unique(allCodes$Year), selected = 2008)
#          ),
#          mainPanel(
#            plotlyOutput('trendPlot', height = "900px")
#          )
shinyApp(ui = ui, server = server)
p <- plot_ly(
x = c('hf_scores', 'ef_score', 'pf_score', 'ef_legal_military', 'pf_expression', 'pf_religion'),
y = c(df$hf_score, df$ef_score, df$pf_score, df$ef_legal_military, df$pf_expression, df$pf_religion),
type = 'bar'
) %>%
layout(
title = 'help',
xaxis = list(
type = 'category',
title = 'scores'
),
yaxis = list(
title = 'score',
range = c(0, 10)
)
)
library(shiny)
# library(leaflet)
# library(maps)
# library(tigris)
# library(sp)
# library(maptools)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# connect to data source
con <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "is-info430.ischool.uw.edu",
Database = "Group4-Final", UID = "INFO430", PWD = "wubalubadubdub",
Port = 1433)
# query data source to get all entries with the countryName, year and scores
entry <- dbGetQuery(con, paste("
SELECT hf_score, ef_score, pf_score, CountryName, EntryYear
FROM Entries As e
Inner Join Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
hf_df <- dbGetQuery(con, paste("SELECT ISO_code, c.CountryName, hf_score, Year=Year(EntryYear)
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID"))
hf_df_2009 <- dbGetQuery(con, paste("
SELECT ISO_code, c.CountryName, hf_score
FROM Entries AS e
JOIN Countries as c
ON e.Country_ID =c.Country_ID
WHERE Year(e.EntryYear) = 2009"))
allCodes <- dbGetQuery(con, paste("
SELECT e.hf_score, e.ef_score, e.pf_score, hfi.ef_legal_military,
hfi.pf_expression, hfi.pf_religion, CountryName, Year=Year(EntryYear)
FROM [human-freedom-index] As hfi
JOIN Entries As e
ON hfi.hf_score = e.hf_score
JOIN Countries As c
On e.Country_ID = c.Country_ID",
sep=""))
colorList <- list(color = toRGB("grey"), width = 0.5)
m_options <- list(showframe = FALSE, showcoastlines = FALSE,
projection = list(type = 'Mercator'))
# plot_geo(hf_df_2009) %>%
#   add_trace(
#     z = ~hf_score,
#     color = ~hf_score,
#     colors = 'Blues',
#     text = ~CountryName,
#     locations = ~ISO_code,
#     marker = list(line = colorList)
#   ) %>%
#   colorbar(title = "Human Freedom Score") %>%
#   layout(
#     title = "Human Freedom Score in 2009",
#     geo = m_options
#   )
server <- function(input, output) {
#add reactive data information. Dataset = built in diamonds data
dataset <- reactive({
allCodes %>%
filter(Year == input$select_year & CountryName == input$select_country)
})
output$trendPlot <- renderPlotly({
df <- dataset()
p <- plot_ly(
x = c('hf_scores', 'ef_score', 'pf_score', 'ef_legal_military', 'pf_expression', 'pf_religion'),
y = c(df$hf_score, df$ef_score, df$pf_score, df$ef_legal_military, df$pf_expression, df$pf_religion),
type = 'bar'
) %>%
layout(
title = 'help',
xaxis = list(
type = 'category',
title = 'scores'
),
yaxis = list(
title = 'score',
range = c(0, 10)
)
)
# chart <- plot_ly(
#   x = 'hf_score',
#   y = dt$hf_score,
#   type = 'bar'
# ) %>%
#   layout(
#     title = 'Temp',
#     xaxis = list(
#       type = 'category',
#       title = 'Scores'
#     ),
#     yaxis = list(
#       title = 'Score',
#       range = c(0,10)
#     )
#   )
})
# scatter plot of economic and personal freedom vs human freedom (with trend lines)
output$scatterPlot1 <- renderPlotly({
# create ployly scatter plot
plot_ly(entry, x = ~hf_score, text = ~paste("Country: ", CountryName, '<br>Year:', EntryYear)) %>%
add_trace(y = ~pf_score, name = 'Personal Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(y = ~ef_score, name = 'Economic Freedom', mode = 'markers', type = 'scatter') %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(pf_score ~ hf_score, entry)), type = 'scatter',
name = "Personal Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(66,190,216)')) %>%
add_trace(entry, x = ~hf_score, y = ~fitted(lm(ef_score ~ hf_score, entry)), type = 'scatter',
name = "Economic Freedom <br> Trend Line", mode = "lines",
line = list(color = 'rgb(253,198,131)')) %>%
layout(title = "Economic and Personal Freedom vs. Human Freedom",
xaxis = list(title = "Human Freedom Score"), yaxis = list(title = "Freedom Score"))
})
output$staticHF <- renderLeaflet({
plot_geo(hf_df_2009) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = "Human Freedom Score in 2009",
geo = m_options
)
})
hf_df_react <- reactive({
year_selection <- hf_df %>%
filter(Year == input$select_year)
})
# output$datatable <- renderDataTable({
#   hf_df_react()
# })
output$dynamicHF <-renderPlotly({
updated_hf_df <- hf_df_react()
u_df_df <- plot_geo(updated_hf_df) %>%
add_trace(
z = ~hf_score,
color = ~hf_score,
colors = 'Blues',
text = ~CountryName,
locations = ~ISO_code,
marker = list(line = colorList)
) %>%
colorbar(title = "Human Freedom Score") %>%
layout(
title = "Human Freedom Score in 2009",
geo = m_options
)
})
}
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# retrieve server variable and plot information
source("source.r")
# Define UI for app that draws a histogram ----
ui <- navbarPage(theme = shinytheme("journal"), "INFO 430",
# create tab for scatter plot with personal/economic freedoms
tabPanel("Scatter",
titlePanel("Personal and Economic Freedom"),
p("This scatter plot explores the relationship between personal freedom scores, economic
freedom scores and human freedom scores. The plot contains scores from all countries
for years 2008 - 2016. The scatter plot shows that both personal and economic scores
have a positive coorelation with human freedom scores. This means that the human freedom
score increases when economic and personal freedom scores increase."),
plotlyOutput("scatterPlot1")
),
# create placeholder tab
# create tab for HF Map
tabPanel("Human Freedom Scores",
titlePanel("Human Freedom Score"),
h3("Static"),
plotlyOutput("staticHF"),
h3("Human Freedom Scores By Year"),
selectInput('select_year',
label = "Select Year",
choices = unique(hf_df$Year),
selected = 2008
),
# dataTableOutput("datatable")
plotlyOutput("dynamicHF")
# p("This is a summary of the project")
),
tabPanel("Interactive",
titlePanel("Summary"),
headerPanel("Title"),
sidebarPanel(
selectInput('select_country', 'select_country', choices = unique(allCodes$CountryName), selected = "Iran"),
selectInput('select_year', 'select_year', choices = unique(allCodes$Year), selected = 2008)
),
mainPanel(
plotlyOutput('trendPlot')
)
)
)
# tabPanel("Interactive Bar Chart",
#          titlePanel("Summary"),
#          headerPanel("Title for side panel"),
#          sidebarPanel(
#            selectInput('select_country', choices = allCodes$CountryName, selected = "A"),
#            selectInput('select_year', choices = unique(allCodes$Year), selected = 2008)
#          ),
#          mainPanel(
#            plotlyOutput('trendPlot', height = "900px")
#          )
shinyApp(ui = ui, server = server)
library(shiny)
library(odbc)
library(DBI)
library(dplyr)
library(RJDBC)
library(plotly)
library(shinythemes)
# retrieve server variable and plot information
source("source.r")
# Define UI for app that draws a histogram ----
ui <- navbarPage(theme = shinytheme("journal"), "INFO 430",
# create tab for scatter plot with personal/economic freedoms
tabPanel("Scatter",
titlePanel("Personal and Economic Freedom"),
p("This scatter plot explores the relationship between personal freedom scores, economic
freedom scores and human freedom scores. The plot contains scores from all countries
for years 2008 - 2016. The scatter plot shows that both personal and economic scores
have a positive coorelation with human freedom scores. This means that the human freedom
score increases when economic and personal freedom scores increase."),
plotlyOutput("scatterPlot1")
),
# create placeholder tab
# create tab for HF Map
tabPanel("Human Freedom Scores",
titlePanel("Human Freedom Score"),
h3("Static"),
plotlyOutput("staticHF"),
h3("Human Freedom Scores By Year"),
selectInput('select_year',
label = "Select Year",
choices = unique(hf_df$Year),
selected = 2008
),
# dataTableOutput("datatable")
plotlyOutput("dynamicHF")
# p("This is a summary of the project")
),
tabPanel("Interactive",
titlePanel("Summary"),
headerPanel("Title"),
sidebarPanel(
selectInput('select_country', 'select_country', choices = unique(allCodes$CountryName), selected = "Iran"),
selectInput('select_year', 'select_year', choices = unique(allCodes$Year), selected = 2008)
),
mainPanel(
plotlyOutput('trendPlot')
)
)
)
# tabPanel("Interactive Bar Chart",
#          titlePanel("Summary"),
#          headerPanel("Title for side panel"),
#          sidebarPanel(
#            selectInput('select_country', choices = allCodes$CountryName, selected = "A"),
#            selectInput('select_year', choices = unique(allCodes$Year), selected = 2008)
#          ),
#          mainPanel(
#            plotlyOutput('trendPlot', height = "900px")
#          )
shinyApp(ui = ui, server = server)
View(allCodes)
